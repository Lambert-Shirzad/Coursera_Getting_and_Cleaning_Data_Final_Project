r2 <- residuals(m1)
qplot(f2,r2)+ geom_hline(yintercept=0)
qplot(r2)
qplot(Sex, Hwt, data =cats, geom="boxplot")
m2 <- lm(Sex~Hwt, data=cats)
m2 <- lm(Sex~Hwt,data=cats)
m2 <- lm(Hwt~Sex,data=cats)
summary(m2)
anova(m2)
m3 <- lm(Hwt~Bwt+Sex, data=cats)
m4 <- lm(Hwt~Sex+Bwt, data=cats)
summary(m3)
summary(m4)
anova(m3)
anova(m4)
Anova(m3)
Anova(m4)
m1 <- lm(strength~machine,data=fiber)
Anova(m1)
(z1 <- lsmeans(m1,~machine))
z2 <- contrast(z1,"pairwise")
qplot(strength, machine)
qplot(machine, strength)
qplot(machine, strength, data=fiber)
z2
summary(z2,adjust="none")
help("summary")
plot(z2)
x <- as.data.frame(UCBAdmissions)
X
x
x$Admit <- factor(x$Admit, levels=rev(levels(x$Admit)))
m1 <- glm(Admit~Gender*Dept, data=X, family=binomial, weights=Freq)
m1 <- glm(Admit~Gender*Dept, data=x, family=binomial, weights=Freq)
Anova(m1)
z1  <- lsmeans(m1,~Gender*Dept, type="response")
z1
summary(z1,by="Gender")
summary(z1,by="Dept")
contrast(z1,"pairwise,by="Dept")
contrast(z1,"pairwise",by="Dept")
plasma
m1 <- glm(ESR~fibrinogen, data=plasma, family=binomial)
summary(m1)
z1  <- lsmeans(m1~ESR, type="response")
z1  <- lsmeans(m1,~ESR, type="response")
plasma
z1  <- lsmeans(m1,~fibrinogen, type="response")
summary(z1)
summary(z1,by="ESR")
plasma
x  <- plasma
x$ESR <- factor(x$ESR)
m1 <- glm(ESR~fibrinogen, data=plasma, family=binomial)
z1  <- lsmeans(m1,~ESR, type="response")
z1  <- lsmeans(m1,~fibrinogen, type="response")
summary(z1)
summary(z1,by="ESR")
z1  <- lsmeans(m1,~ESR*fibrinogen, type="response")
m1 <- glm(ESR~fibrinogen*globulin, data=plasma, family=binomial)
m1
z1  <- lsmeans(m1,~fibrinogen*globulin, type="response")
summary(z1)
summary(z1,by="globulin")
m1 <- glm(ESR~fibrinogen, data=plasma, family=binomial)
summary(m1)
anova(m1)
lsmeans(m1,~fibrinogen, type="response")
lsmeans(m1,~fibrinogen, type="response", at=list(fibrinogen=c(2.5,3,3.5)))
getwd
getwd()
cd
f = function(arg1, arg2)
{
a = arg1 + arg2
b= arg1 * arg2
return(a+b)
}
f(1,2)
a=b
a=2
b <- 2
f = function(arg1, arg2)
{
a = arg1 + arg2
b= arg1 * arg2
return(a*b)
a+b
}
f(1,2)
f(1,2)
f = function(arg1, arg2)
{
a = arg1 + arg2
b= arg1 * arg2
a+b
return(a*b)
a+b
}
f(1,2)
f = function(arg1, arg2)
{
a = arg1 + arg2
b= arg1 * arg2
a+b
a+b
}
f(1,2)
help ggplot2
ggplot2
ggplot2(data=[1 2, 2 4])
f = function(arg1)
{
b = 1+2*arg1-5*x^2+x^3
qplot(arg1, b)
}
f(1:1000/1000*6-1)
x= 1:1000/1000*6-1
f(x)
library(ggplot2)
f(x)
f(y=1:1000/1000*6-1)
x
x(2)
x[2]
[1 2]
12
[1, 2]
[1; 2]
a= [1; 2]
a= [1 2]
a= [1, 2]
f = function(arg1)
{
b = 1+2*arg1-5*x*x+x^3
qplot(arg1, b)
}
f(x)
f(x)
f = function(arg1)
{
b = 1+2*arg1-5*x^2+x^3
qplot(arg1, b)
}
y=1:10/1000*6-1
y
y=1:10/10*6-1
y
f = function( x  )
{
y = cos(x)
plot( x , y , ... )
}
f( 1:1000/50 )
f = function( x  )
{
y = cos(x)
plot( x , y , ... )
}
f( x=1:1000/50 )
f = function( x  )
{
y = cos(x)
plot( x , y  )
}
f( x=1:1000/50 )
h= 1
xyzblahbla =1
xyzblahbla =3
ls
ls()
rm(ls())
rm
c()
c
help(c)
rm(list(ls()))
rm(list = ls())
install.packages("swirl")
x = "message"
x
x <-
x
x
x  <- x
x
rm(list = ls())
x
x <- x
vector
x <- 2
x <- 2
attributes(x)
class(x)
length(x)
dimensions(x)
dimension(x)
x <- (0.5, 0.6)
x <- (0.5 0.6)
seq_len(4)
seq_len(4)
seq_len
seq_along(4)
x <- c("a","b","c")
seq_along(x)
length(x)
x <- c(1,2,3,4)
seq_along(x)
x <- c(2,3,5)
seq_along(x)
add2 <- function(x,y){
x+y
}
add2(2,3)
above10 <- function(x){
x10 <- x[x>10]
x10
}
above10(c(1,2,6,12, 11, 9, 14))
above <- function(x, n){
xn <- x[x>n]
xn
}
above(c(1,2,6,12, 11, 9, 14),4)
columnMean <- function(x) {
for (i in seq_len(nxol(x))){
mean(x[,i])
}
}
x <- matrix(1:6,2,3)
columnMean(x)
columnMean <- function(x) {
for (i in seq_len(ncol(x))){
mean(x[,i])
}
}
columnMean(x)
columnMean <- function(x) {
for (i in seq_len(ncol(x))){
print(mean(x[,i]))
}
}
columnMean(x)
columnMean <- function(x) {
meansCol <- numeric(ncol(x))
for (i in seq_len(ncol(x))){
print(mean(x[,i]))
meansCol[i] <- mean(x[,i])
}
return(meansCol)
}
columnMean(x)
x <- list(a=1:5, b=5:6)
lapply(x,mean)
library(datasets)
data(iris)
rm(list=ls())
library(datasets)
data(iris)
?iris
iris
head(iris)
x <- iris[1,]
x
x <- iris[iris$Species == "setosa",]
head(x)
x <- iris[iris$Species == "virginica",]
mean(x$Sepal.Length)
mean(iris[iris$Species == "virginca",])
mean(iris$Sepal.Length[iris$Species == "virginca",])
apply(iris[, 1:4], 2, mean)
rm(list=ls())
library(datasets)
data(mtcars)
head(mtcars)
mean(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$hp, mtcars$cyl, mean)
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x[1]
x[1,2]
x[1]-x[2]
x[1]-x[3]
debug(ls)
ls
install.packages("xlsx")
setwd("C:\Users\NS\Desktop\Data_Science_Coursera\3. Getting and Cleaning Data\Week 1")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(url=fileUrl,destfile="Q3.xlsx",method="auto")
library(xlsx)
rowIndex <- 18:23
colIndex <-  7:15
read.xlsx
nrow()
nrow
?nrow
?read.xlsx
dat <- read.xlsx("Q1.csv", rowIndex=rowIndex, colIndex=colIndex,
as.data.frame=TRUE)
library(xlsx)
install.packages("rJava")
library(xlsx)
library(rJava)
library(rJava)
install.packages(rJava)
install.packages("rJava")
install.packages("Java")
library(rJava)
Rtools
Rtools()
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
rm(list=ls())
###Getting and Cleaning Data
swirl()
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r-arch:country)
select(cran, r_arch:country)
select(cran, -(r_arch:country))
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_version))
cran2 <- selecet(cran, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
swirl()
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group(cran, package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
swirl()
library(swirl)
sds
options(editor = "internal")
rm(ls=list())
rm(list=ls())
options(editor = "internal")
library(swirl)
swirl()
submit()
?n_distinct
submit
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts)
View(top_counts_sorted)
quantile(pack_sum$unique, probs=0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex, count,-grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
submit()
?spread()
?spread
submit()
extract_numeric("class5")
submit()
submit()
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
passed
failed <- mutate(failed, status = "failed")
bind_rows(passed, failed)
sat
?seperate
?separate
submit()
submit()
submit()
setwd("C:/Users/NS/Desktop/Data_Science_Coursera/3. Getting and Cleaning Data/Week 4")
setwd("C:/Users/NS/Desktop/Data_Science_Coursera/3. Getting and Cleaning Data/Final Project")
cd
pwd
pwd()
wd
getwd
getwd()
touch README.md
ls()
list()
list
lswd
getwd
getwd()
run_analysis
run_analysis.r
allData <- rbind(train, test)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
###Getting and Cleaning Data
###Final Project
###Navid Shirzad
###June 26, 2016
library(reshape2)
setwd("C:/Users/NS/Desktop/Data_Science_Coursera/3. Getting and Cleaning Data/Final Project")
## Download and unzip the dataset:
filename <- "getdata_dataset.zip"
if (!file.exists(filename)){
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(fileURL, filename, method="curl")
}
if (!file.exists("UCI HAR Dataset")) {
unzip(filename)
}
# Load activity labels + features
activityLabels <- read.table("UCI HAR Dataset/activity_labels.txt")
activityLabels[,2] <- as.character(activityLabels[,2])
features <- read.table("UCI HAR Dataset/features.txt")
features[,2] <- as.character(features[,2])
# Extract only the data on mean and standard deviation
featuresWanted <- grep(".*mean.*|.*std.*", features[,2])
featuresWanted.names <- features[featuresWanted,2]
featuresWanted.names = gsub('-mean', 'Mean', featuresWanted.names)
featuresWanted.names = gsub('-std', 'Std', featuresWanted.names)
featuresWanted.names <- gsub('[-()]', '', featuresWanted.names)
# Load the datasets
train <- read.table("UCI HAR Dataset/train/X_train.txt")[featuresWanted]
trainActivities <- read.table("UCI HAR Dataset/train/Y_train.txt")
trainSubjects <- read.table("UCI HAR Dataset/train/subject_train.txt")
train <- cbind(trainSubjects, trainActivities, train)
test <- read.table("UCI HAR Dataset/test/X_test.txt")[featuresWanted]
testActivities <- read.table("UCI HAR Dataset/test/Y_test.txt")
testSubjects <- read.table("UCI HAR Dataset/test/subject_test.txt")
test <- cbind(testSubjects, testActivities, test)
# merge datasets and add labels
allData <- rbind(train, test)
colnames(allData) <- c("subject", "activity", featuresWanted.names)
# turn activities & subjects into factors
allData$activity <- factor(allData$activity, levels = activityLabels[,1], labels = activityLabels[,2])
allData$subject <- as.factor(allData$subject)
allData.melted <- melt(allData, id = c("subject", "activity"))
allData.mean <- dcast(allData.melted, subject + activity ~ variable, mean)
write.table(allData.mean, "tidy.txt", row.names = FALSE, quote = FALSE)
